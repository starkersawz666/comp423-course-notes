{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Zixin's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Zixin Wei</li> <li>Reviewer: tang zoey</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before we start on this tutorial, there are some configurations that should be done:</p> <ul> <li> <p>Docker: Docker is containerization platform. If Docker has not been installed, please go to Docker Desktop to downlaod and install.</p> </li> <li> <p>Visual Studio Code: VSCode is the Integrated Development Environment (IDE) recommended here. </p> </li> <li> <p>Dev Containers Extension: to be installed inside Visual Studio Code.</p> </li> </ul>"},{"location":"tutorials/rust-setup/#git-initialization","title":"Git Initialization","text":"<p>Create and enter a blank directory with the following commands:</p> <pre><code>mkdir comp423-rust-container\ncd comp423-rust-container\n</code></pre> <p>Then, initialize a new git repository:</p> <pre><code>git init\n</code></pre>"},{"location":"tutorials/rust-setup/#dev-container-configuration","title":"Dev Container Configuration","text":"<p>To quickly configurate a dev container, we need to create a folder named <code>.devcontainer</code> inside the project directory:</p> <pre><code>mkdir .devcontainer\n</code></pre> <p>Inside <code>.devcontainer</code>, we need to create a <code>devcontainer.json</code> file:</p> <pre><code>touch .devcontainer/devcontainer.json\n</code></pre> <p>and add the following content:</p> <pre><code>{\n    \"name\": \"Rust Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    },\n    \"postCreateCommand\": \"rustc --version\"\n}\n</code></pre> <p>What is the effect of the JSON content above?</p> <ul> <li><code>image</code> specifies the container image we use for the project, which is from Microsoft's Dev Container repository for Rust;</li> <li><code>customizations.vscode.extensions</code> helps add VSCode extensions of rust automatically in the dev container</li> <li><code>postCreateCommand</code> is the command run after the container is created. You can fill in other commands if you want to build your own rust environment.</li> </ul>"},{"location":"tutorials/rust-setup/#build-and-open-dev-container","title":"Build and Open Dev Container","text":"<p>Reopen the project folder, press <code>Ctrl+Shift+P</code> on Windows or <code>Cmd+Shift+P</code> on Mac, type <code>Dev Containers: Reopen in Container</code>, and select the corresponding option. Then, the image will be downloaded (may take a few minutes) and the project will be reopened in dev container. To verify Rust version, run <code>rustc --version</code> (1.83.0 on Jan. 26).</p>"},{"location":"tutorials/rust-setup/#create-new-rust-project","title":"Create New Rust Project","text":"<p>After entering the dev container, we can use the following command to create a new binary project:</p> <pre><code>cargo new hello-comp423 --vcs none\ncd hello-comp423\n</code></pre> <ul> <li> <p><code>Cargo</code> It is Rust's official package manager and build system. Cargo simplifies tasks like project creation, dependency management, and building. More about Cargo and Rust can be found at Github.</p> </li> <li> <p><code>Cargo new</code> This sub - command creates a new Rust project. In our case, we're creating a project named hello - comp423.</p> </li> <li> <p><code>--vcs</code> stands for \"Version Control System\", which is not necessary here because we've already created a Git repository. Therefore, we use <code>--vcs none</code> to avoid the automatic initialization of vcs.</p> </li> <li> <p>The generated structure of the project contains:</p> </li> </ul> <pre><code>hello-comp423/\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 main.rs\n</code></pre>"},{"location":"tutorials/rust-setup/#write-the-helloworld-program","title":"Write the \"Helloworld\" Program","text":"<p>Open the <code>src/main.rs</code> file in VSCode, and replace its contents with:</p> <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre> <ul> <li> <p>The <code>fn</code> keyword is used to define a function, and <code>fn main()</code> defines a function <code>main</code>, which is the entry point of executable program.</p> </li> <li> <p><code>println!(\"Hello COMP423\");</code> print the given text to the standard output.</p> </li> </ul>"},{"location":"tutorials/rust-setup/#build-and-run-the-program","title":"Build and Run the Program","text":"<p>To build the program, use the <code>cargo build</code> command (which is similar to <code>gcc</code> command):</p> <pre><code>cargo build\n</code></pre> <p>The complied binary is in the <code>target/debug</code> directory, and it can be run directly:</p> <pre><code>./target/debug/hello-comp423\n</code></pre> <p>Alternatively, <code>cargo run</code> can build and immediately run the program in one step:</p> <pre><code>cargo run\n</code></pre>"},{"location":"tutorials/rust-setup/#result-following-the-tutorial","title":"Result Following the Tutorial","text":"<p>An expected result of the Rust project is given at Github.</p>"},{"location":"tutorials/rust-setup/#congratulations","title":"Congratulations!","text":"<p>You have successfully run your first Rust program! You can read more about rust and dev container:</p> <ul> <li>Microsoft Rust Container</li> <li>Dev Container in VSCode</li> <li>Rust Documentation</li> </ul>"}]}